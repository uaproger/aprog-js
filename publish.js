import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const force = process.argv.includes('--force');

/**
 * –ö–æ–ø—ñ—é—î —Ñ–∞–π–ª, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞, –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î, —è–∫—â–æ --force
 */
function copyFile(from, to) {
    fs.mkdirSync(path.dirname(to), { recursive: true });

    if (!fs.existsSync(to) || force) {
        fs.copyFileSync(from, to);
        console.log(`‚úÖ  –ö–æ–ø—ñ–π–æ–≤–∞–Ω–æ: ${to}`);
        console.log("");
    } else {
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ —ñ—Å–Ω—É—î): ${to}`);
        console.log("");
    }
}

/**
 * –ö–æ–ø—ñ—é—î –≤—Å—ñ .js —Ñ–∞–π–ª–∏ –∑ src/constructs —É resources/js/components/constructs
 */
function copyConstructs() {
    const srcDir = path.resolve(__dirname, 'src/constructs');
    const destDir = path.resolve(process.cwd(), 'resources/js/components/constructs');

    if (!fs.existsSync(srcDir)) {
        console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: ${srcDir}`);
        process.exit(1);
    }

    const files = fs.readdirSync(srcDir);

    files.forEach(file => {
        const from = path.join(srcDir, file);
        const to = path.join(destDir, file);

        if (fs.statSync(from).isFile() && path.extname(from) === '.js') {
            copyFile(from, to);
        }
    });
}

console.log('üì¶ –ü–æ—á–∏–Ω–∞—é –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ Aprog...');
console.log("");
copyConstructs();
console.log('üèÅ –ì–æ—Ç–æ–≤–æ.');